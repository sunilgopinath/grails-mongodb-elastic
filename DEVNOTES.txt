#### This is where I will keep track of creating the application #####

1. To create the stub grails framework I used netbeans create grails app
2. To add mongodb to grails and removed hibernate I used a tip from 
http://etcpe9.wordpress.com/2012/01/28/beginning-grails-2-0-with-mongodb/
INSTALLING MONGODB
 - I ran grails install-plugin mongodb but got an error saying I need to specify the version
 - Used the grails shell but then got an error about missing property
 - finally tried Grails plugins... that worked
REMOVING HIBERNATE
 - I ran grails uninstall-plugin hibernate from the "Run Grails Command" but to no avail
 - just removed runtime ":hibernate:$grailsVersion" from /grails-app/conf/BuildConfig.groovy
3. To start creating domain classes and controllers I used Grails - A Quick Start Guide
4. Scaffolding does not seem to work with mongodb. I tried to create a textarea by default through constraints
but am unable to do so. Also I cannot change the order of the fields.
ADDING TINYMCE to GRAILS PROJECT
This proved to be quite the challenge
1. Download tinymce from http://www.tinymce.com/download/download.php => Gives you a file ~/tinymce
2. Copy ~/tinymce to /web-apps/js/tiny_mce
3. In main.gsp add <g:javascript src="tiny_mce/tiny_mce.js"/> This will pick up the folder under the web-apps/js folder
4. Tiny mce still won't work at this point. It will complain about en.js and editor_template.js
5. You have to go to Config.groovy and add this line grails.resources.adhoc.excludes = ['/js/tiny_mce/**/*.*']
6. Now back to the gsp, add the tiny_mce.init() line ex 
tinyMCE.init({
        theme : "advanced",
        mode : "textareas",
        plugins : "fullpage",
        theme_advanced_buttons3_add : "fullpage"
});
inside <g:javascript> tags like
<g:javascript>
tinyMCE.init({
        theme : "advanced",
        mode : "textareas",
        plugins : "fullpage",
        theme_advanced_buttons3_add : "fullpage"
});
</g:javascript>
7. Now add the textarea as per usual <g:textArea name="..."/>
8. Grails escapes html by default inside thinkgs like ${fieldValue(bean:...)} so your beautiful tiny mce markup will be escaped
9. Change the above to ${object.field} and ex: ${person.firstName} and there you have it.
ADDING BOOTSTRAP-DATEPICKER.JS
This was not as complicated as adding the tinymce js file
1. Went to http://www.eyecon.ro/bootstrap-datepicker/ and downloaded the datepicker
2. I only need the date picker on the custom form so I created a separate gsp for with only the datepicker js in it so I could call it on create and edit.
3. The problem was <g:datePicker splits the domain date up into <name>_year <name>_month <name>_day ex: published_year, published_month, published_day so replacing the <g:datePicker> with <input text:..> as used in bootstrap-datepicker will lead to a null exception. How to get around this? My solution was to create 4 hidden fields and then populate them by splitting the date up using jQuery. The result is in the boostrap.js
ADDING SECURITY FILTERS
Following the grails quick start guide book did not prove fruitful. The security filters did not work.
ADDING TWITTER FEED
If you google how to add a custom twitter feed, you will most likely end up with sites telling you to add these two statements
<script src="http://twitter.com/javascripts/blogger.js"></script>
<script src="https://api.twitter.com/1/statuses/user_timeline.json?screen_name=nymdev&callback=twitterCallback2&count=5"></script>
substituting screen_name in the above link with your desired twitter handle. Keep in mind some sites may be out of date and use the old api url but the above one works
To get it to work, I used the example from themelab.com: http://www.themelab.com/2010/05/18/custom-twitter-widget-tutorial/ and then subtituted my own css
STYLING THE BLOG INDEX PAGE
I basically followed the http://www.binvisions.com/tutorials/ example and made some minor CSS tweaks.
ADDING LOGIN REDIRECTION
The problem was how to redirect to the same page after logging in. Now I am not using a security filter (at the time of writing so there is no going through a security filter, although I could so I am going straight to the controller. There would be no problem if it was a dedicated login page but this is a widget that resides on every page. How do we track the referring uri? The way we can do it is using grails templates and passing in paramters to them. You can pass in a model map into the template you want to render ex: http://grails.org/doc/latest/ref/Tags/render.html so I passed in the requesting uri path. At this stage I know that i only have values of the form /controller/action/${id} so I could easily map it by splitting the request parameter and hardcoding a solution. If i have more sophisticated urls then I might create a service.
Files involved:
/grails-app/views/layouts/main.gsp
/grails-app/views/layouts/_topnav.gsp
/grails-app/controllers/../PersonController.groovy